import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
from scipy.fft import fft, fftshift
import soundfile as sf

# Cargar el audio
archivo_audio = r'InASentimentalMood.wav'
y, fm = sf.read(archivo_audio)
y = y / (np.max(np.abs(y)))  # Normalización de amplitud

# Frecuencias de corte para los filtros
frecuencias_corte = [500, 1000, 2000]

# Parámetros del espectrograma
ventana = 4096
overlap = ventana // 2

# Aplicación de los filtros FIR
for fc in frecuencias_corte:
    # Diseño del filtro FIR mediante ventaneo
    numtaps = 101  # Número de coeficientes del filtro (orden del filtro + 1)
    hlp = signal.firwin(numtaps, cutoff=fc, fs=fm)
    
    # Aplicación del filtro usando convolución
    y_filtrado = np.convolve(y, hlp, mode='same')
    
    # Visualización de la respuesta en frecuencia del filtro
    H = fftshift(np.abs(fft(hlp, 1024)))
    f = np.linspace(-fm/2, fm/2, len(H))
    plt.figure(figsize=(8, 4))
    plt.plot(f, H)
    plt.title(f'Respuesta en frecuencia del filtro FIR (fc = {fc} Hz)')
    plt.xlabel('Frecuencia [Hz]')
    plt.ylabel('Amplitud')
    plt.grid()
    plt.tight_layout()
    plt.savefig(f'Respuesta_FIR_{fc}Hz.png', dpi=300)
    plt.close()
    
    # Espectrograma del audio filtrado
    plt.figure(figsize=(10, 6))
    plt.specgram(y_filtrado, NFFT=ventana, Fs=fm, noverlap=overlap, scale='dB', cmap='viridis')
    plt.ylim([0, 5000])  # Mostrar frecuencias altas
    plt.title(f'Espectrograma del Audio Filtrado (fc = {fc} Hz)')
    plt.xlabel('Tiempo [s]')
    plt.ylabel('Frecuencia [Hz]')
    plt.colorbar(label='Amplitud [dB]')
    plt.tight_layout()
    plt.savefig(f'Espectrograma_Filtrado_{fc}Hz.png', dpi=300)
    plt.close()
    
    # Comparación en el dominio temporal para una nota seleccionada
    T1_nota, T2_nota = 2.48, 2.52  # Intervalo de la nota
    indices = np.arange(len(y)) / fm
    index_nota = np.logical_and(indices > T1_nota, indices < T2_nota)
    
    plt.figure(figsize=(8, 4))
    plt.plot(indices[index_nota], y[index_nota], label='Original', alpha=0.8)
    plt.plot(indices[index_nota], y_filtrado[index_nota], label=f'Filtrado (fc = {fc} Hz)', alpha=0.8)
    plt.xlabel('Tiempo [s]')
    plt.ylabel('Amplitud')
    plt.title(f'Comparación Temporal de Nota (fc = {fc} Hz)')
    plt.legend()
    plt.grid()
    plt.tight_layout()
    plt.savefig(f'Comparacion_Temporal_{fc}Hz.png', dpi=300)
    plt.close()
